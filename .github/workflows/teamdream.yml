name: teamdream

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test-ui:
    name: Test UI
    runs-on: ubuntu-latest
    container:
      image: getfider/githubci:0.0.2

    steps:
      - name: checkout code
        uses: actions/checkout@v2
      - run: npm ci
      - run: mage lint:ui
      - run: mage test:ui

  test-server:
    name: Test Server
    runs-on: ubuntu-latest
    container:
      image: getfider/githubci:0.0.2

    services:
      minio:
        image: getfider/minio:0.0.2
        ports:
          - 9000:9000
        env:
          MINIO_ACCESS_KEY: s3user
          MINIO_SECRET_KEY: s3user-s3cr3t
      postgres:
        image: postgres:9.6.8
        env:
          POSTGRES_USER: teamdream_ci
          POSTGRES_PASSWORD: teamdream_ci_pw
          POSTGRES_DB: teamdream_ci
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - run: mage lint:server
      - name: Run server tests
        run: |
          mkdir ./dist
          mage test:server
        env:
          BLOB_STORAGE_S3_ENDPOINT_URL: http://minio:9000
          DATABASE_URL: postgres://teamdream_ci:teamdream_ci_pw@postgres:5432/teamdream_ci?sslmode=disable

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test-server, test-ui]
    container:
      image: getfider/githubci:0.0.2

    steps:
      - name: checkout code
        uses: actions/checkout@v2
      - name: Set repository name environment variable
        run: echo ::set-env name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")
        shell: bash
      - name: Docker build
        env:
          CONTAINER_URL: docker.pkg.github.com/${{github.repository}}/
        run: |
          export SHORT_SHA=`git rev-parse --short=7 ${GITHUB_SHA}`
          docker build . --file Dockerfile --tag $CONTAINER_URL$REPOSITORY_NAME:${SHORT_SHA} --tag $CONTAINER_URL$REPOSITORY_NAME:latest

      - name: extract branch name
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: getBranch

      - name: push docker image
        if: steps.getBranch.outputs.branch == 'master'
        env:
          CONTAINER_URL: docker.pkg.github.com/${{github.repository}}/
        run: |
          export SHORT_SHA=`git rev-parse --short=7 ${GITHUB_SHA}`
          echo ${{secrets.GITHUB_TOKEN}} | docker login --username $GITHUB_ACTOR --password-stdin docker.pkg.github.com
          docker push $CONTAINER_URL$REPOSITORY_NAME:${SHORT_SHA}
          docker push $CONTAINER_URL$REPOSITORY_NAME:latest
      - name: Trigger deployment webhook
        env:
          CONTAINER_URL: docker.pkg.github.com/${{github.repository}}/
        run: |
          export SHORT_SHA=`git rev-parse --short=7 ${GITHUB_SHA}`
          curl -X POST -H "Content-Type: application/json" --data "{ \"name\": \"$CONTAINER_URL$REPOSITORY_NAME\", \"tag\": \"${SHORT_SHA}\" }" https://keel.tombull.com/v1/webhooks/native
      - name: Immediately purge CloudFlare cache
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/d2b0defa3c606ec547496ef2eb8a4f59/purge_cache" -H "Authorization: Bearer ${{secrets.CLOUDFLARE_API_TOKEN}}" -H "Content-Type: application/json" --data '{"purge_everything":true}'
      - name: Wait for one minute for deployment to activate
        run: sleep 60s
      - name: Purge CloudFlare cache again after deployment complete
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/d2b0defa3c606ec547496ef2eb8a4f59/purge_cache" -H "Authorization: Bearer ${{secrets.CLOUDFLARE_API_TOKEN}}" -H "Content-Type: application/json" --data '{"purge_everything":true}'
